
        // it('should return 400 if create client request body is empty', async () => {
        //     const response = await request(server).post('/api/customers').send({});
        //     expect(response.statusCode).toBe(400);
        //     expect(response.body.message).toBe("Le contenu ne peut pas Ãªtre vide !");
        // });



        // it('should create a client successfully', (done) => {
        //     const newClient = new Client({
        //         nom: 'Doe',
        //         prenom: 'John',
        //         date_naissance: '1989-12-31',
        //         adresse: '123 Main St',
        //         email: 'john.doe@example.com',
        //         mot_de_passe: 'hashedpassword'
        //     });

        //     dbConn.query.mockImplementation((query, values, callback) => {
        //         callback(null, { insertId: 1 });
        //     });

        //     Client.create(newClient, (err, data) => {
        //         expect(err).toBeNull();
        //         expect(data).toEqual({ id: 1, ...newClient });
        //         done();
        //     });
        // });

        // it('should find a client by id successfully', (done) => {
        //     dbConn.query.mockImplementation((query, values, callback) => {
        //         callback(null, [{ id: 1, nom: 'Doe', prenom: 'John', date_naissance: '1989-12-31', adresse: '123 Main St', email: 'john.doe@example.com', mot_de_passe: 'hashedpassword' }]);
        //     });

        //     Client.findById(1, (err, data) => {
        //         expect(err).toBeNull();
        //         expect(data).toEqual({ id: 1, nom: 'Doe', prenom: 'John', date_naissance: '1989-12-31', adresse: '123 Main St', email: 'john.doe@example.com', mot_de_passe: 'hashedpassword' });
        //         done();
        //     });
        // });

        // it('should return error if client not found by id', (done) => {
        //     dbConn.query.mockImplementation((query, values, callback) => {
        //         callback(null, []);
        //     });

        //     Client.findById(9999, (err, data) => {
        //         expect(err).toEqual({ kind: 'not_found' });
        //         expect(data).toBeNull();
        //         done();
        //     });
        // });

        // it('should get all clients successfully', (done) => {
        //     dbConn.query.mockImplementation((query, callback) => {
        //         callback(null, [{ id: 1, nom: 'Doe', prenom: 'John', date_naissance: '1989-12-31', adresse: '123 Main St', email: 'john.doe@example.com', mot_de_passe: 'hashedpassword' }]);
        //     });

        //     Client.getAll((err, data) => {
        //         expect(err).toBeNull();
        //         expect(Array.isArray(data)).toBe(true);
        //         expect(data.length).toBeGreaterThan(0);
        //         done();
        //     });
        // });

        // it('should update a client by id successfully', (done) => {
        //     const updatedClient = new Client({
        //         nom: 'Doe',
        //         prenom: 'John',
        //         date_naissance: '1989-12-31',
        //         adresse: '123 Main St',
        //         email: 'john.doe@example.com',
        //         mot_de_passe: 'newhashedpassword'
        //     });

        //     dbConn.query.mockImplementation((query, values, callback) => {
        //         callback(null, { affectedRows: 1 });
        //     });

        //     Client.updateById(1, updatedClient, (err, data) => {
        //         expect(err).toBeNull();
        //         expect(data).toEqual({ id: 1, ...updatedClient });
        //         done();
        //     });
        // });

        // it('should return error if client to update is not found by id', (done) => {
        //     const updatedClient = new Client({
        //         nom: 'Doe',
        //         prenom: 'John',
        //         date_naissance: '1989-12-31',
        //         adresse: '123 Main St',
        //         email: 'john.doe@example.com',
        //         mot_de_passe: 'newhashedpassword'
        //     });

        //     dbConn.query.mockImplementation((query, values, callback) => {
        //         callback(null, { affectedRows: 0 });
        //     });

        //     Client.updateById(9999, updatedClient, (err, data) => {
        //         expect(err).toEqual({ kind: 'not_found' });
        //         expect(data).toBeNull();
        //         done();
        //     });
        // });

        // it('should find a client by email successfully', (done) => {
        //     dbConn.query.mockImplementation((query, callback) => {
        //         callback(null, [{ id: 1, nom: 'Doe', prenom: 'John', date_naissance: '1989-12-31', adresse: '123 Main St', email: 'john.doe@example.com', mot_de_passe: 'hashedpassword' }]);
        //     });

        //     Client.findByEmail('john.doe@example.com', (err, data) => {
        //         expect(err).toBeNull();
        //         expect(data).toEqual({ id: 1, nom: 'Doe', prenom: 'John', date_naissance: '1989-12-31', adresse: '123 Main St', email: 'john.doe@example.com', mot_de_passe: 'hashedpassword' });
        //         done();
        //     });
        // });

        // it('should return error if client not found by email', (done) => {
        //     dbConn.query.mockImplementation((query, callback) => {
        //         callback(null, []);
        //     });

        //     Client.findByEmail('unknown@example.com', (err, data) => {
        //         expect(err).toEqual({ kind: 'not_found' });
        //         expect(data).toBeNull();
        //         done();
        //     });
        // });

        // it('should remove a client by id successfully', (done) => {
        //     dbConn.query.mockImplementation((query, values, callback) => {
        //         callback(null, { affectedRows: 1 });
        //     });

        //     Client.remove(1, (err, data) => {
        //         expect(err).toBeNull();
        //         expect(data.affectedRows).toBe(1);
        //         done();
        //     });
        // });